"""Add XML columns for detection logic

Revision ID: e7009356a7e5
Revises: 
Create Date: 2025-09-12 15:11:11.548501

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e7009356a7e5'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_use_case_versions_use_case_id'), table_name='use_case_versions')
    op.drop_table('use_case_versions')
    op.drop_index(op.f('ix_deployment_logs_use_case_id'), table_name='deployment_logs')
    op.drop_table('deployment_logs')
    op.drop_index(op.f('ix_use_cases_name'), table_name='use_cases')
    op.drop_table('use_cases')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('use_cases',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('platform', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('severity', postgresql.ENUM('low', 'medium', 'high', 'critical', name='severitylevel'), autoincrement=False, nullable=False),
    sa.Column('confidence', postgresql.ENUM('low', 'medium', 'high', 'critical', name='severitylevel'), autoincrement=False, nullable=False),
    sa.Column('false_positive_rate', postgresql.ENUM('low', 'medium', 'high', 'critical', name='severitylevel'), autoincrement=False, nullable=False),
    sa.Column('maturity', postgresql.ENUM('draft', 'testing', 'production', 'deprecated', name='maturitystatus'), autoincrement=False, nullable=True),
    sa.Column('compliance', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('mitre_tactics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('mitre_techniques', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('mitre_sub_techniques', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('kill_chain', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('cve_references', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('threat_actors', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('campaigns', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('wazuh_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('dependencies', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('supported_log_sources', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('performance_impact', postgresql.ENUM('low', 'medium', 'high', 'critical', name='severitylevel'), autoincrement=False, nullable=True),
    sa.Column('detection_rules', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('detection_decoders', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('agent_configuration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('immediate_actions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('investigation_steps', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('containment_actions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('active_response_linux', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('active_response_windows', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('virustotal_integration', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('abuseipdb_lookup', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('custom_feeds', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('geolocation', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('asn_lookup', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('domain_reputation', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('test_cases', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_tested', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('target_groups', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('deployment_status', postgresql.ENUM('draft', 'pending', 'deployed', 'failed', name='deploymentstatus'), autoincrement=False, nullable=True),
    sa.Column('deployment_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('rollback_available', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('alerts_generated', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('true_positives', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('false_positives', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('precision', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last_triggered', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('source_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('license', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('contributors', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('download_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('use_cases_pkey'))
    )
    op.create_index(op.f('ix_use_cases_name'), 'use_cases', ['name'], unique=False)
    op.create_table('deployment_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('use_case_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('deployment_logs_pkey'))
    )
    op.create_index(op.f('ix_deployment_logs_use_case_id'), 'deployment_logs', ['use_case_id'], unique=False)
    op.create_table('use_case_versions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('use_case_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('changes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('use_case_versions_pkey'))
    )
    op.create_index(op.f('ix_use_case_versions_use_case_id'), 'use_case_versions', ['use_case_id'], unique=False)
    # ### end Alembic commands ###